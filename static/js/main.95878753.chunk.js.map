{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","utils/findUserById.ts","utils/generateUniqueId.ts","components/FormAddTodo/FormAddTodo.tsx","components/FormAddTodo/constants.ts","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","classNames","TodoList","todos","map","findUserById","users","find","generateUniqueId","Math","max","FormAddTodo","onSubmit","useState","selectedUserId","setSelectedUserId","setTitle","isUserSelected","setIsUserSelected","isTitleValid","setIsTitleValid","action","method","event","preventDefault","Boolean","htmlFor","type","value","onChange","target","placeholder","defaultValue","disabled","App","usersFromServer","preparedTodos","todosFromServer","setTodos","prevState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.95878753.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React from 'react';\nimport { User } from '../../types';\nimport './UserInfo.scss';\n\ninterface Props {\n  user: User,\n}\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { TodoWithUser } from '../../types';\nimport { UserInfo } from '../UserInfo/UserInfo';\nimport './TodoInfo.scss';\n\ninterface Props {\n  todo: TodoWithUser;\n}\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    title,\n    user,\n    completed = false,\n    id,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames('TodoInfo', {\n        'TodoInfo--completed': completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n\n      {user\n        ? <UserInfo user={user} />\n        : <p> No user found</p>}\n    </article>\n  );\n};\n","import { TodoWithUser } from '../../types';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: TodoWithUser[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo) => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","import { User } from '../types';\n\nexport function findUserById(users: User[], id: number) {\n  return users.find(user => user.id === id) || null;\n}\n","import { TodoWithUser } from '../types';\n\nexport function generateUniqueId(todos: TodoWithUser[]): number {\n  return Math.max(...todos.map(todo => todo.id)) + 1;\n}\n","import { useState } from 'react';\nimport { TodoWithUser, User } from '../../types';\nimport { findUserById } from '../../utils/findUserById';\nimport {\n  ERROR_MESSAGE_FOR_INVALID_TITLE,\n  ERROR_MESSAGE_FOR_INVALID_USER,\n} from './constants';\nimport { generateUniqueId } from '../../utils/generateUniqueId';\nimport './FormAddTodo.scss';\n\ninterface Props {\n  users: User[];\n  todos: TodoWithUser[];\n  onSubmit: (todo: TodoWithUser) => void,\n}\n\nexport const FormAddTodo: React.FC<Props> = ({ users, onSubmit, todos }) => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [title, setTitle] = useState('');\n  const [isUserSelected, setIsUserSelected] = useState(true);\n  const [isTitleValid, setIsTitleValid] = useState(true);\n\n  function resetForm() {\n    setSelectedUserId(0);\n    setTitle('');\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    setIsTitleValid(() => Boolean(title));\n    setIsUserSelected(() => Boolean(selectedUserId));\n\n    if (!title || !selectedUserId) {\n      return;\n    }\n\n    onSubmit({\n      id: generateUniqueId(todos),\n      title,\n      userId: selectedUserId,\n      completed: false,\n      user: findUserById(users, selectedUserId),\n    });\n\n    resetForm();\n  }\n\n  function handleTitleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setIsTitleValid(true);\n    setTitle(event.target.value);\n  }\n\n  function handleUserSelect(event: React.ChangeEvent<HTMLSelectElement>) {\n    setIsUserSelected(true);\n    setSelectedUserId(+event.target.value);\n  }\n\n  return (\n    <>\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        className=\"add_todo_form\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title_input\">Title:</label>\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            id=\"title_input\"\n            value={title}\n            onChange={handleTitleChange}\n            placeholder=\"Enter todo title\"\n          />\n          {!isTitleValid && (\n            <span className=\"error\">{ERROR_MESSAGE_FOR_INVALID_TITLE}</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user_select\">User:</label>\n          <select\n            data-cy=\"userSelect\"\n            id=\"user_select\"\n            defaultValue={0}\n            value={selectedUserId}\n            onChange={handleUserSelect}\n          >\n            <option value=\"0\" disabled>\n              Choose a user\n            </option>\n            {users.map(user => (\n              <option value={user.id} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {!isUserSelected && (\n            <span className=\"error\">{ERROR_MESSAGE_FOR_INVALID_USER}</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n    </>\n  );\n};\n","export const ERROR_MESSAGE_FOR_INVALID_TITLE = 'Please enter a title';\nexport const ERROR_MESSAGE_FOR_INVALID_USER = 'Please choose a user';\n","import { useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { Todo, TodoWithUser } from './types/Todo';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { FormAddTodo } from './components/FormAddTodo/FormAddTodo';\nimport { findUserById } from './utils/findUserById';\n\nfunction preparedTodos(todos: Todo[]) {\n  return todos.map((todo: Todo) => ({\n    ...todo,\n    user: findUserById(usersFromServer, todo.userId),\n  }));\n}\n\nexport const App = () => {\n  const [todos, setTodos] = useState(preparedTodos(todosFromServer));\n\n  const onSubmit = (todo: TodoWithUser) => {\n    setTodos((prevState) => [...prevState, todo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <FormAddTodo\n        users={usersFromServer}\n        onSubmit={onSubmit}\n        todos={todos}\n      />\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}